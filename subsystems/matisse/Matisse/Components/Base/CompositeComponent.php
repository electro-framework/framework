<?php
namespace Selenia\Matisse\Components\Base;

use Selenia\Interfaces\Views\ViewInterface;
use Selenia\ViewEngine\Engines\MatisseEngine;

/**
 * A component that has an associated view, which is parsed and rendered with a specific view engine.
 *
 * <p>The component has a dual nature, where in one hand we have the component itself, and on the other hand we have
 * (possibly) a tree of components which will render the component's appearance. This is why it is called "composite".
 * It could also be called "skinnable".
 * <p>The template is a parallel tree to the tree where the component is located (if the component is not standalone).
 */
class CompositeComponent extends Component
{
  /**
   * @var string
   */
  public $template = '';
  /**
   * The URL of an external template to be loaded and rendered.
   *
   * @var string
   */
  public $templateUrl = '';
  /**
   * The engine to be used for parsing and rendering the view if {@see render()} returns an embedded one.
   *
   * @var string
   */
  protected $viewEngineClass = MatisseEngine::class;

  /**
   * Allows subclasses to generate the view's markup dinamically.
   * If not overriden, the default behaviour is to load the view from an external file, if one is defined on
   * `$templateUrl`. If not, the content of `$template` is returned, if set, otherwise no output is generated.
   *
   * > **Note:** this returns nothing; the output is sent directly to the output buffer.
   */
  protected function render ()
  {
    if ($this->templateUrl)
      $view = $this->context->viewService->loadFromFile ($this->templateUrl);
    elseif ($this->template)
      $view = $this->context->viewService->loadFromString ($this->template, $this->viewEngineClass);
    else return null;
    $view->compile ();
    $this->setupView ($view);
    echo $view->render ();
  }

  /**
   * Allows access to the compiled view generated by the parsing process.
   * Component specific initialization can be performed here before the
   * page is rendered.
   * Override to add extra initialization.
   *
   * @param ViewInterface $view
   */
  protected function setupView (ViewInterface $view)
  {
    //override
  }

}
