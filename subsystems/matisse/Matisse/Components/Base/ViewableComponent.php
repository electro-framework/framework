<?php
namespace Selenia\Matisse\Components\Base;

use Selenia\Interfaces\Views\ViewInterface;
use Selenia\Matisse\Exceptions\ComponentException;
use Selenia\ViewEngine\Engines\MatisseEngine;

/**
 * A component that has an associated view, which is parsed and rendered with a specific view engine.
 */
class ViewableComponent extends Component
{
  /**
   * The URL of an external template to be loaded and rendered.
   *
   * @var string
   */
  public $templateUrl = '';
  /**
   * @var ViewInterface
   */
  protected $view;
  /**
   * The engine to be used for parsing and rendering the view if {@see render()} returns an embedded one.
   *
   * @var string
   */
  protected $viewEngineClass = MatisseEngine::class;

  public function __construct (ViewInterface $view)
  {
    parent::__construct ();
    $this->view = $view;
  }

  protected function postRender ($rendered)
  {
    $rendered = ob_get_clean ();
    if (!$rendered)
      $rendered = ob_get_clean ();
    else ob_end_clean ();

    // If render() returned a string, compile it using the default rendering engine.
    if (is_string ($rendered)) {
      $view = $this->view
        ->setEngine ($this->viewEngineClass)
        ->loadFromString ($rendered);
    }
    // If render() returned a view instance, use it.
    else if ($rendered instanceof ViewInterface)
      $view = $rendered;

    else throw new ComponentException ($this,
      sprintf ("Invalid return type from <kbd>%s::render()</kbd>", typeInfoOf ($this)));

    $this->setupView ($view);
    /** @var ViewInterface $view */
    return $view->render ($this);
  }

  protected function preRender ()
  {
    ob_start ();
  }

  /**
   * Allows subclasses to generate the view's markup dinamically.
   * If not overriden, the default behaviour is to load the view from an external file, if one is defined on
   * `templateUrl`. If not, no output is generated.
   *
   * @return ViewInterface|string|null If `null` (or no return value), the framework assumes the content has been
   *                                   output to PHP's output buffer.
   */
  protected function render ()
  {
    if ($this->templateUrl)
      return $this->view->loadFromFile ($this->templateUrl);
    return null;
  }

  /**
   * Allows access to the components tree generated by the parsing process.
   * Component specific initialization can be performed here before the
   * page is rendered.
   * Override to add extra initialization.
   *
   * @param ViewInterface $view
   */
  protected function setupView (ViewInterface $view)
  {
    //override
  }

}
